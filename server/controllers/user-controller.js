const userService = require('../service/user-service');
const {validationResult} = require('express-validator');
const ApiError = require('../exceptions/api-error');
const PaymentService = require('../service/payment-service');   

class UserController {
    async registration(req, res, next) {
        try {
            const errors = validationResult(req);
            if(!errors.isEmpty()) {
                return next(ApiError.BadRequest('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', errors.array()))
            }
            const {email, password, referralCode} = req.body;
            
            // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const registrationSource = JSON.stringify({
                ip: req.ip || req.connection.remoteAddress,
                userAgent: req.headers['user-agent'],
                referer: req.headers['referer']
            });
            
            const userData = await userService.registration(email, password, referralCode, registrationSource);
            res.cookie('refreshToken', userData.refreshToken, {maxAge: 30 * 24 * 60 * 60 * 1000, httpOnly: true});
            return res.json(userData);
        } catch (e) {
            next(e);
        }
    }

    async login(req, res, next) {
        try {
            const {email, password} = req.body;
            const userData = await userService.login(email, password);
            res.cookie('refreshToken', userData.refreshToken, {maxAge: 30 * 24 * 60 * 60 * 1000, httpOnly: true});
            return res.json(userData);
        } catch (e) {
            next(e);
        }
    }

    async logout(req, res, next) {
        try {
            const {refreshToken} = req.cookies;
            const token = await userService.logout(refreshToken);
            res.clearCookie('refreshToken');
            return res.json(token);

        } catch (e) {
            next(e);
        }
        
    }

    async activate(req, res, next) {
        try {
            const activationLink = req.params.link;
            await userService.activate(activationLink);
            return res.redirect(process.env.CLIENT_URL);

        } catch (e) {
            next(e);
        }
    }

    async refresh(req, res, next) {
        try {
            const { refreshToken } = req.cookies;
            const userData = await userService.refresh(refreshToken);
            res.cookie('refreshToken', userData.refreshToken, {maxAge: 30 * 24 * 60 * 60 * 1000, httpOnly: true});
            return res.json(userData);
        } catch (e) {
            next(e);
        }
    }

    async getUsers(req, res, next) {
        try {
            const users = await userService.getAllUsers();
            return res.json(users)
        } catch (e) {
            next(e);
        }
    }

    async payment(req, res, next) {
        try {
            const { cardNumber, expiryDate, cvv, cardHolder, amount } = req.body;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (!cardNumber || !expiryDate || !cvv || !cardHolder || !amount) {
                return next(ApiError.BadRequest('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'));
            }

            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const userId = req.user?.id || null;
            console.log('üí≥ Payment request - userId:', userId || '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ user-service
            const paymentResult = await PaymentService.processPayment({
                cardNumber,
                expiryDate,
                cvv,
                cardHolder,
                amount
            }, userId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if (paymentResult.status === 'success') {
                return res.json({
                    success: true,
                    message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                    transactionId: paymentResult.transactionId,
                    amount: paymentResult.amount
                });
            } else if (paymentResult.status === 'requires_3ds') {
                return res.json({
                    success: false,
                    requires3DS: true,
                    message: '–¢—Ä–µ–±—É–µ—Ç—Å—è 3DS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
                    transactionId: paymentResult.transactionId,
                    amount: paymentResult.amount
                });
            } else {
                return res.json({
                    success: false,
                    message: paymentResult.reason === 'timeout' 
                        ? '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ' 
                        : '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                    transactionId: paymentResult.transactionId,
                    reason: paymentResult.reason
                });
            }
        } catch (e) {
            next(e);
        }
    }

    async verify3DS(req, res, next) {
        try {
            const { transactionId, verificationCode, paymentData } = req.body;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (!transactionId || !verificationCode || !paymentData) {
                return next(ApiError.BadRequest('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'));
            }

            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const userId = req.user?.id || null;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3DS –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            const paymentResult = await PaymentService.verify3DS(transactionId, verificationCode, paymentData, userId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if (paymentResult.status === 'success') {
                return res.json({
                    success: true,
                    message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ—Å–ª–µ 3DS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                    transactionId: paymentResult.transactionId,
                    amount: paymentResult.amount
                });
            } else {
                return res.json({
                    success: false,
                    message: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ—Å–ª–µ 3DS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                    transactionId: paymentResult.transactionId,
                    reason: paymentResult.reason
                });
            }
        } catch (e) {
            next(e);
        }
    }


}

module.exports = new UserController();
