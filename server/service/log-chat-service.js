const TelegramBot = require('node-telegram-bot-api');

class LogChatService {
    constructor() {
        this.isEnabled = false;
        this.logChatIds = [];
        
        if (!process.env.TELEGRAM_BOT_TOKEN) {
            console.warn('‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
            return;
        }
        
        if (!process.env.LOG_CHAT_ID) {
            console.warn('‚ö†Ô∏è  LOG_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
            return;
        }
        
        try {
            this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
            
            // –ü–∞—Ä—Å–∏–º LOG_CHAT_ID - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω ID –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            const chatIds = process.env.LOG_CHAT_ID.split(',').map(id => id.trim()).filter(id => id);
            
            if (chatIds.length === 0) {
                console.warn('‚ö†Ô∏è  LOG_CHAT_ID –ø—É—Å—Ç–æ–π. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
                return;
            }
            
            this.logChatIds = chatIds;
            this.isEnabled = true;
            
            console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (${this.logChatIds.length} ${this.declensionChats(this.logChatIds.length)})`);
            this.logChatIds.forEach((chatId, index) => {
                console.log(`   ${index + 1}. Chat ID: ${chatId}`);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
            console.warn('‚ö†Ô∏è  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        }
    }
    
    declensionChats(count) {
        const cases = [2, 0, 1, 1, 1, 2];
        const titles = ['—á–∞—Ç', '—á–∞—Ç–∞', '—á–∞—Ç–æ–≤'];
        return titles[(count % 100 > 4 && count % 100 < 20) ? 2 : cases[Math.min(count % 10, 5)]];
    }

    async sendLog(message) {
        if (!this.isEnabled) {
            return null;
        }
        
        const results = [];
        let successCount = 0;
        let failCount = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã
        for (const chatId of this.logChatIds) {
            try {
                await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
                results.push({ chatId, success: true });
                successCount++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ —á–∞—Ç ${chatId}:`, error.message);
                results.push({ chatId, success: false, error: error.message });
                failCount++;
            }
        }
        
        if (successCount > 0) {
            console.log(`‚úÖ –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${successCount} –∏–∑ ${this.logChatIds.length} ${this.declensionChats(this.logChatIds.length)}`);
        }
        
        return { results, successCount, failCount, total: this.logChatIds.length };
    }

    async logRegistration(email, referralCode = null, registrationSource = null) {
        if (!this.isEnabled) {
            console.log(`üìù [–ü—Ä–æ–ø—É—â–µ–Ω–æ] –õ–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è ${email}`);
            return null;
        }
        
        try {
            let sourceInfo = '';
            if (registrationSource) {
                try {
                    const source = JSON.parse(registrationSource);
                    const ip = source.ip || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                    const userAgent = source.userAgent || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                    sourceInfo = `\nüì± <b>User-Agent:</b> ${this.truncate(userAgent, 50)}\nüåç <b>IP:</b> ${ip}`;
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                }
            }
            
            const message = `üéâ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>\n\n` +
                `üìß <b>Email:</b> ${email}\n` +
                `${referralCode ? `üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> ${referralCode}\n` : ''}` +
                `‚è∞ <b>–í—Ä–µ–º—è:</b> ${this.formatDateTime(new Date())}` +
                sourceInfo;
            
            await this.sendLog(message);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
        }
    }

    async logPayment(userId, email, amount, transactionId, referralCode = null) {
        if (!this.isEnabled) {
            console.log(`üìù [–ü—Ä–æ–ø—É—â–µ–Ω–æ] –õ–æ–≥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è ${email}`);
            return null;
        }
        
        try {
            const message = `üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</b>\n\n` +
                `üë§ <b>Email:</b> ${email}\n` +
                `üíµ <b>–°—É–º–º–∞:</b> ${amount} ‚ÇΩ\n` +
                `üÜî <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>${transactionId}</code>\n` +
                `${referralCode ? `üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> ${referralCode}\n` : ''}` +
                `‚è∞ <b>–í—Ä–µ–º—è:</b> ${this.formatDateTime(new Date())}`;
            
            await this.sendLog(message);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message);
        }
    }

    formatDateTime(date) {
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    truncate(str, maxLength) {
        if (str.length <= maxLength) return str;
        return str.substring(0, maxLength) + '...';
    }
}

module.exports = new LogChatService();

